// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  REJECTED
  CANCELLED
  SUCCESSFUL
}

model User {
  id                           String                @id @default(cuid())
  name                         String
  email                        String                @unique
  password                     String
  token                        String?
  // Transaction relations
  sentTransactions             Transaction[]         @relation("sender")
  receivedTransactions         Transaction[]         @relation("recipient")
  // PendingTransaction relations
  sentPendingTransactions      PendingTransaction[]  @relation("pendingSender")
  receivedPendingTransactions  PendingTransaction[]  @relation("pendingRecipient")
  userPendingTransactions      PendingTransaction[]  @relation("userPending")
  // RejectedTransaction relations
  sentRejectedTransactions     RejectedTransaction[] @relation("rejectedSender")
  receivedRejectedTransactions RejectedTransaction[] @relation("rejectedRecipient")
  userRejectedTransactions     RejectedTransaction[] @relation("userRejected")
}

model Transaction {
  id             String            @id @default(cuid())
  initialisedAt  DateTime          @default(now())
  senderId       String
  sender         User              @relation(name: "sender", map: "sender", fields: [senderId], references: [id])
  recipientId    String
  recipient      User              @relation(name: "recipient", map: "recipient", fields: [recipientId], references: [id])
  amount         Float
  acceptedAt     DateTime
  status         TransactionStatus @default(SUCCESSFUL)
  expirationTime DateTime
  signature      String
  previousHash   String
}

model PendingTransaction {
  id             String            @id @default(cuid())
  initialisedAt  DateTime          @default(now())
  senderId       String
  sender         User              @relation("pendingSender", fields: [senderId], references: [id])
  recipientId    String
  recipient      User              @relation("pendingRecipient", fields: [recipientId], references: [id])
  amount         Float
  status         TransactionStatus @default(PENDING)
  expirationTime DateTime
  signature      String
  previousHash   String
  user           User?             @relation("userPending", fields: [userId], references: [id])
  userId         String?
}

model RejectedTransaction {
  id              String            @id @default(cuid())
  initialisedAt   DateTime          @default(now())
  senderId        String
  sender          User              @relation("rejectedSender", fields: [senderId], references: [id])
  recipientId     String
  recipient       User              @relation("rejectedRecipient", fields: [recipientId], references: [id])
  amount          Float
  acceptedAt      DateTime?
  status          TransactionStatus @default(REJECTED)
  expirationTime  DateTime
  signature       String
  previousHash    String
  rejectionReason String?
  user            User?             @relation("userRejected", fields: [userId], references: [id])
  userId          String?
}
